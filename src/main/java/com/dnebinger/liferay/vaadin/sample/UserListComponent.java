package com.dnebinger.liferay.vaadin.sample;

import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.model.User;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Runo;

public class UserListComponent extends CustomComponent {
	private static final Log logger = LogFactoryUtil.getLog(UserListComponent.class);

	private static final String NAME = "Name";
	private static final String SCREENNAME = "Screen Name";
	private static final String EMAILADDRESS = "Email Address";
	private static final String FIELD_FULLNAME = "fullName";
	private static final String FIELD_SCREENNAME = "screenName";
	private static final String FIELD_EMAILADDRESS = "emailAddress";


	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table users;

	private LazyUserContainer userContainer;
	private UserColumnGenerator userColumnGenerator;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserListComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// This container, based on the LazyPagedContainer, encapsulates the access to the UserLocalServiceUtil
		// class and it's methods to get to the users.
		userContainer = new LazyUserContainer();

		// do not allow row selection
		users.setSelectable(false);

		// set the container as the data source for the users table.
		users.setContainerDataSource(userContainer);

		// we want name, email, and screen name to be a link to click to the detail page, so we will add them
		// as extra columns that are buttons.
		users.addContainerProperty(FIELD_FULLNAME, Button.class, null, NAME, null, null);
		users.addContainerProperty(FIELD_EMAILADDRESS, Button.class, null, EMAILADDRESS, null, null);
		users.addContainerProperty(FIELD_SCREENNAME, Button.class, null, SCREENNAME, null, null);

		// Since those columns will be buttons, they need to be generated.  This generator will be used
		// to generate the column objects (since they are not a natural member of the User class).
		userColumnGenerator = new UserColumnGenerator();

		// Add the generated columns.
		users.addGeneratedColumn(FIELD_FULLNAME, userColumnGenerator);
		users.addGeneratedColumn(FIELD_EMAILADDRESS, userColumnGenerator);
		users.addGeneratedColumn(FIELD_SCREENNAME, userColumnGenerator);

		// add our visible columns so only the generated are used.
		// this will leave the other members of the User class outside of it.
		users.setVisibleColumns(new Object[] {FIELD_FULLNAME, FIELD_EMAILADDRESS, FIELD_SCREENNAME});

		// refresh the rows
		users.refreshRowCache();
	}

	public class UserColumnGenerator implements Table.ColumnGenerator {

		@Override
		public Object generateCell(Table table, Object obj, Object colId) {
			// cast the params
			User user = (User) obj;
			String colName = colId.toString();

			// create the button
			Button btn = new Button();

			btn.addClickListener(new UserButtonClickListener(user.getUserId()));

			// update the caption
			if (FIELD_FULLNAME.equals(colName)) {
				btn.setCaption(user.getFullName());
			} else if (FIELD_SCREENNAME.equals(colName)) {
				btn.setCaption(user.getScreenName());
			} else if (FIELD_EMAILADDRESS.equals(colName)) {
				btn.setCaption(user.getEmailAddress());
			} else {
				btn.setCaption(String.valueOf(user.getUserId()));
			}

			btn.setStyleName(Runo.BUTTON_LINK);

			return btn;
		}
	}

	public class UserButtonClickListener implements Button.ClickListener {
		private static final long serialVersionUID = 1565552282985573970L;
		private long userId;

		public UserButtonClickListener(final long id) {
			super();

			userId = id;
		}

		@Override
		public void buttonClick(Button.ClickEvent clickEvent) {
			switchToDetailView(userId);
		}
	}

	public void switchToDetailView(final long userId) {
		UsersUI uui = (UsersUI) getUI();

		uui.switchToDetailView(userId);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// users
		users = new Table();
		users.setImmediate(false);
		users.setWidth("100.0%");
		users.setHeight("100%");
		mainLayout.addComponent(users);

		return mainLayout;
	}

}
