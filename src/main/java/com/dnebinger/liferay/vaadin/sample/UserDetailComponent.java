package com.dnebinger.liferay.vaadin.sample;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.service.UserLocalServiceUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.liferay.portal.model.*;
import com.vaadin.ui.themes.Runo;
import org.apache.commons.lang.StringUtils;

/**
 * class UserDetailComponent: The Vaadin component representing a basic user detail page.
 * @author dnebinger
 */
public class UserDetailComponent extends CustomComponent {
	private static final Log logger = LogFactoryUtil.getLog(UserDetailComponent.class);

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button backLink;
	@AutoGenerated
	private HorizontalLayout contents;
	@AutoGenerated
	private Embedded userPortrait;
	@AutoGenerated
	private VerticalLayout details;
	@AutoGenerated
	private Label screenName;
	@AutoGenerated
	private Label emailAddress;
	@AutoGenerated
	private Label userId;
	@AutoGenerated
	private Label name;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public UserDetailComponent(UsersUI uui) {
		// Invoke the Vaadin IDE code to build the widget heirarchy from the visual design.
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// set the initial values
		screenName.setValue("");
		emailAddress.setValue("");
		userId.setValue("");
		name.setValue("");

		// also need to clear the portrait, initialize it to the basic male portrait.
		String maleUrl = UserConstants.getPortraitURL(uui.getThemeDisplay().getPathImage(), true, 0);

		// set the url as the source for the user portrait.
		userPortrait.setSource(new ExternalResource(maleUrl));

		// change the back button style to a link.
		backLink.setStyleName(Runo.BUTTON_LINK);

		// add the back link listener.
		backLink.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent clickEvent) {
				// get the ui object
				UsersUI uui = (UsersUI) getUI();

				// invoke our little switch method.
				uui.switchToListView();
			}
		});
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// contents
		contents = buildContents();
		mainLayout.addComponent(contents);

		// backLink
		backLink = new Button();
		backLink.setCaption("Back");
		backLink.setImmediate(false);
		backLink.setWidth("-1px");
		backLink.setHeight("-1px");
		mainLayout.addComponent(backLink);
		mainLayout.setComponentAlignment(backLink, new Alignment(6));

		return mainLayout;
	}

	/**
	 * updateFromUser: Updates the screen elements for the given user id.
	 * @param uId User id to update the view for.
	 */
	public void updateFromUser(final long uId) {
		User user = null;

		try {
			// try to get the user given the uId...
			user = UserLocalServiceUtil.fetchUser(uId);
		} catch (SystemException e) {
			logger.error("Error fetching user " + uId + ": " + e.getMessage(), e);
		}

		UsersUI uui = (UsersUI) getUI();

		if (user == null) {
			// we could not get a user record.  Reset all fields and return.
			screenName.setValue("");
			emailAddress.setValue("");
			userId.setValue("");
			name.setValue("");

			// also need to clear the portrait
			String maleUrl = UserConstants.getPortraitURL(uui.getThemeDisplay().getPathImage(), true, 0);

			userPortrait.setSource(new ExternalResource(maleUrl));

			return;
		}

		// set the labels from the values for the user.
		screenName.setValue(user.getScreenName());
		emailAddress.setValue(user.getEmailAddress());
		userId.setValue(String.valueOf(uId));
		name.setValue(user.getFullName());

		// also need to update the portrait.
		String portUrl = null;

		try {
			// get the portrait url for this user
			portUrl = user.getPortraitURL(uui.getThemeDisplay());
		} catch (PortalException e) {
			logger.error("Error getting user portrait url: " + e.getMessage(), e);
		} catch (SystemException e) {
			logger.error("Error getting user portrait url: " + e.getMessage(), e);
		}

		if (StringUtils.isBlank(portUrl)) {
			// don't have a url, default to the male portrait
			portUrl = UserConstants.getPortraitURL(uui.getThemeDisplay().getPathImage(), true, 0);
		}

		// update the portrait
		userPortrait.setSource(new ExternalResource(portUrl));
	}

	@AutoGenerated
	private HorizontalLayout buildContents() {
		// common part: create layout
		contents = new HorizontalLayout();
		contents.setImmediate(false);
		contents.setWidth("100.0%");
		contents.setHeight("-1px");
		contents.setMargin(true);
		contents.setSpacing(true);

		// details
		details = buildDetails();
		contents.addComponent(details);

		// userPortrait
		userPortrait = new Embedded();
		userPortrait.setCaption("User Portrait:");
		userPortrait.setImmediate(false);
		userPortrait.setWidth("-1px");
		userPortrait.setHeight("-1px");
		userPortrait.setSource(new ThemeResource(
				"img/component/embedded_icon.png"));
		userPortrait.setType(1);
		userPortrait.setMimeType("image/png");
		contents.addComponent(userPortrait);

		return contents;
	}

	@AutoGenerated
	private VerticalLayout buildDetails() {
		// common part: create layout
		details = new VerticalLayout();
		details.setImmediate(false);
		details.setWidth("100.0%");
		details.setHeight("-1px");
		details.setMargin(false);

		// name
		name = new Label();
		name.setCaption("Name:");
		name.setImmediate(false);
		name.setWidth("-1px");
		name.setHeight("-1px");
		name.setValue("userName");
		details.addComponent(name);

		// userId
		userId = new Label();
		userId.setCaption("User ID:");
		userId.setImmediate(false);
		userId.setWidth("-1px");
		userId.setHeight("-1px");
		userId.setValue("userId");
		details.addComponent(userId);

		// emailAddress
		emailAddress = new Label();
		emailAddress.setCaption("Email Address:");
		emailAddress.setImmediate(false);
		emailAddress.setWidth("-1px");
		emailAddress.setHeight("-1px");
		emailAddress.setValue("emailAddress");
		details.addComponent(emailAddress);

		// screenName
		screenName = new Label();
		screenName.setCaption("Screen Name:");
		screenName.setImmediate(false);
		screenName.setWidth("-1px");
		screenName.setHeight("-1px");
		screenName.setValue("screenName");
		details.addComponent(screenName);

		return details;
	}

}
